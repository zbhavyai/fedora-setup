# #############################################################################
# ollama bash completion https://github.com/ollama/ollama/issues/1653#issuecomment-2184527185
# #############################################################################
if command -v ollama &> /dev/null; then
    function _complete_ollama() {
        local cur prev words cword
        _init_completion -n : || return

        if [[ ${cword} -eq 1 ]]; then
            COMPREPLY=($(compgen -W "serve create show run push pull list ps cp rm help" -- "${cur}"))
        elif [[ ${cword} -eq 2 ]]; then
            case "${prev}" in
                (run|show|cp|rm|push|list)
                    WORDLIST=$((ollama list 2>/dev/null || echo "") | tail -n +2 | cut -d "	" -f 1)
                    COMPREPLY=($(compgen -W "${WORDLIST}" -- "${cur}"))
                    __ltrim_colon_completions "$cur"
                    ;;
            esac
        fi
    }
    complete -F _complete_ollama ollama
fi

# #############################################################################
# hashicorp vault secret listing
# #############################################################################
if rpm -q vault &>/dev/null; then
    export VAULT_ADDR="http://127.0.0.1:8200"
    export VAULT_TOKEN=$(cat "/usr/share/userful-vault/vault_root_token.txt")
fi

function listVaultSecrets() {
    if rpm -q vault &>/dev/null; then
        local atleastOneSecret=0
        for key in $(vault kv list --format=json secret | jq -r '.[]'); do
            printSeparator "-"
            atleastOneSecret=1

            printf "Secret: $key\n"
            printf "Value : $(vault kv get --format=json "secret/$key" | jq -c .data.data)\n"
        done

        if [ $atleastOneSecret -eq 0 ]; then
            printf "No secrets found\n"
        else
            printSeparator "-"
        fi
    else
        printf "Vault is not installed\n"
    fi
}
export -f listVaultSecrets

# #############################################################################
# alias for logging
# #############################################################################
alias cdlog='cd /var/log/userful'
alias reboot='rm -rf /var/log/userful/*; shutdown -r 0'
alias xorgErrors='ls -1t /var/log/Xorg*log | head -1 | xargs grep EE'

function create_log_aliases() {
    local LOGVAR="$1"
    local LOGFILEPATH="$2"

    if [ -n "$LOGFILEPATH" ] && [ -f "$LOGFILEPATH" ]; then
        alias log"$LOGVAR"="vi $LOGFILEPATH"
        alias less"$LOGVAR"="less $LOGFILEPATH"
        alias cat"$LOGVAR"="cat $LOGFILEPATH"
        alias tail"$LOGVAR"="tail -f -n 0 $LOGFILEPATH"
        # alias cd"$LOGVAR"="cd $(dirname $LOGFILEPATH)"
    fi
}

create_log_aliases aether '/var/log/userful/userful-chronos-aether.log'
create_log_aliases vem '/var/log/userful/userful-chronos-ve.log'
create_log_aliases veo '/var/log/userful/veo.log'
create_log_aliases db '/var/log/userful/db_backup_and_restore.log'
create_log_aliases init '/var/log/userful/userful-chronos-initial-setup.log'
create_log_aliases plugin '/var/log/userful/profile-data.log'
create_log_aliases grafana '/var/log/grafana/grafana.log'
create_log_aliases prom '/var/log/userful/prometheus.log'
create_log_aliases kc '/var/log/userful/userful-chronos-keycloak.log'
create_log_aliases kcapp '/var/log/userful/userful-chronos-keycloak-app.log'
create_log_aliases postgres "$(ls -1t /var/lib/pgsql/data/log/*log 2>/dev/null | head -1)"

# #############################################################################
# aws configuration
# #############################################################################
export AWS_PROFILE=dev
export K8NS=carbon
alias awslogin='aws sso login --profile "${AWS_PROFILE}"'
alias gcmdeployments='kubectl --namespace "${K8NS}" get deployments'
alias gcmpods='kubectl --namespace "${K8NS}" get pods'

function gcmlogs() {
    if [ -z "${1}" ]; then
        echo "Usage: gcmlogs <deployment-name> or <pod-name>"
        echo "Eg   : gcmlogs bhavyai"
        return
    fi

    if kubectl --namespace ${K8NS} get deployment "${1}" >/dev/null 2>&1; then
        kubectl --namespace ${K8NS} logs --follow --tail=0 deploy/${1}
    else
        kubectl --namespace ${K8NS} logs --follow --tail=0 ${1}
    fi
}
export -f gcmlogs
